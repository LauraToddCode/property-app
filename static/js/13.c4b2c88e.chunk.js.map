{"version":3,"sources":["Components/BackBtn.js","Components/MortgageCalculator.js","Components/PropertyProfile.js","redux/save/save-actions.js"],"names":["Item","history","useHistory","onClick","goBack","id","useStyles","makeStyles","theme","root","display","flexWrap","flexDirection","margin","spacing","withoutLabel","marginTop","textField","width","MortgageCalculator","props","classes","React","useState","propertyPrice","deposit","years","interestRate","repaymentType","values","setValues","handleChange","prop","event","target","value","totalMonths","Number","interestPerMonth","interestPerMonthPlus1","interestPowMonths","Math","pow","amountToPay","repaymentResult","toFixed","interestResult","round","repayment","interest","interestArr","Array","fill","repaymentValues","i","arrVal","push","reverse","repaymentArrTemp","Object","repaymentArr","j","length","yAxisValues","Paper","elevation","className","TextField","label","defaultValue","variant","clsx","InputProps","startAdornment","InputAdornment","adornment","position","onChange","e","setSelectionRange","endAdornment","RadioGroup","aria-label","FormControlLabel","name","control","Radio","legend","data","labels","datasets","backgroundColor","borderColor","options","scales","yAxes","scaleLabel","labelString","ticks","stepSize","xAxes","connect","state","currentItem","save","dispatch","addToSaved","useEffect","window","scrollTo","modalDisplay","setModalDisplay","modalClass","bedsPlural","bedrooms","bathsPlural","bathrooms","livingPlural","livingRooms","BackBtn","imgs","autoPlay","navButtonsProps","style","padding","navButtonsAlwaysVisible","map","image","src","process","alt","imgAlt","displayPrice","type","features","feature","propertyDesc","price","itemID","actionTypes","payload","removeFromSaved","loadCurrentItem","item","getMinPriceValue","getMaxPriceValue","getMinBedsValue","getMaxBedsValue"],"mappings":"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","file":"static/js/13.c4b2c88e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\n\r\nfunction Item() {\r\n    let history = useHistory();\r\n    return (\r\n          <button onClick={() => history.goBack()} id=\"backBtn\">\r\n            <ArrowBackIcon /> <span>go back</span>\r\n          </button>\r\n    );\r\n};\r\n\r\nexport default Item","import React from \"react\";\r\nimport Paper from '@material-ui/core/Paper';\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport { Line } from 'react-chartjs-2';\r\n\r\n// styling for input boxes from Materials UI\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      display: 'flex',\r\n      flexWrap: 'wrap',\r\n      flexDirection: 'row',\r\n    },\r\n    margin: {\r\n      margin: theme.spacing(1),\r\n    },\r\n    withoutLabel: {\r\n      marginTop: theme.spacing(3),\r\n    },\r\n    textField: {\r\n      width: '25ch',\r\n    },\r\n}));\r\n\r\n\r\n\r\nfunction MortgageCalculator(props) {\r\n    // styling for input boxes\r\n    const classes = useStyles();\r\n\r\n    // initialise state for input box values\r\n    const [values, setValues] = React.useState({\r\n        propertyPrice: props.propertyPrice,\r\n        deposit: props.propertyPrice * .1,\r\n        years: \"25\",\r\n        interestRate: \"3\",\r\n        repaymentType: \"Repayment\"\r\n    });\r\n\r\n    // set values on change for input boxes\r\n    const handleChange = (prop) => (event) => {\r\n        setValues({ ...values, [prop]: event.target.value });\r\n    };\r\n\r\n    // caluclations for the monthly repayments\r\n    let totalMonths = 12 * Number(values.years);\r\n    let interestPerMonth = Number(values.interestRate/100)/12;\r\n    let interestPerMonthPlus1 = interestPerMonth + 1;\r\n    let interestPowMonths = Math.pow(interestPerMonthPlus1,totalMonths);\r\n    let amountToPay = Number(values.propertyPrice - values.deposit)\r\n    let numerator = amountToPay*interestPerMonth*interestPowMonths;\r\n    let denominator = interestPowMonths - 1;\r\n    let repaymentResult = (numerator/denominator).toFixed(2);\r\n    let interestResult = amountToPay*interestPerMonth;\r\n\r\n    // this is needed to show the result to 2 decimal places\r\n    interestResult = (Math.round((interestResult * 100)/100)).toFixed(2);\r\n    \r\n    // class variables to show or hide the correct result depending on which radio button is displayed\r\n    const repayment = values.repaymentType == \"Repayment\" ? \"show\" : \"hide\";\r\n    const interest = values.repaymentType == \"Interest\" ? \"show\" : \"hide\";\r\n\r\n    // creates an array of values for the y axis based on interest only\r\n    let interestArr = new Array(Number(values.years + 1)).fill(amountToPay)\r\n\r\n    // creates an array of values for the y axis based on repayment\r\n    let repaymentValues = [0];\r\n    for (let i = 0; i < values.years; i++) {\r\n        let arrVal = (repaymentValues[i] + (repaymentResult*12))\r\n        repaymentValues.push(arrVal)\r\n    }\r\n\r\n    repaymentValues.reverse();\r\n\r\n    // makes an array of the values from the repaymentValues object\r\n    let repaymentArrTemp = Object.values(repaymentValues)\r\n    let repaymentArr = []\r\n\r\n    // loops through array to make each value 2 decimal places\r\n    for (let j = 0; j < repaymentArrTemp.length; j++) {\r\n        repaymentArr.push(repaymentArrTemp[j].toFixed(2))\r\n    }\r\n\r\n    // decides which array to use for y axis of graph depending on which radio button is selected\r\n    let yAxisValues = values.repaymentType == \"Repayment\" ? repaymentArr : interestArr;\r\n\r\n    // create array of years for x-axis of graph\r\n    let years = [0];\r\n    for (let i = 0; i < values.years; i++) {\r\n        years.push(i + 1)\r\n    }\r\n\r\n    return (\r\n        <Paper elevation={3} className={classes.root + \" mortgageCalculator\"}>\r\n            <div id=\"mortgageCalc\">\r\n                <h2>Mortgage Calculator</h2>\r\n                <div>\r\n                    <div className={classes.root}>\r\n                        <TextField\r\n                        label=\"Total Property Price\"\r\n                        defaultValue={props.propertyPrice}\r\n                        variant=\"outlined\"\r\n                        className={clsx(classes.margin, classes.textField)}\r\n                        InputProps={{\r\n                            startAdornment: <InputAdornment  className={classes.adornment} position=\"start\">£</InputAdornment>,\r\n                        }}\r\n                        onChange={handleChange(\"propertyPrice\")}\r\n                        onClick={e => e.target.setSelectionRange(0, e.target.value.length)}\r\n                        />\r\n                        <TextField\r\n                        label=\"Deposit\"\r\n                        defaultValue={props.propertyPrice * .1}\r\n                        variant=\"outlined\"\r\n                        className={clsx(classes.margin, classes.textField)}\r\n                        InputProps={{\r\n                            startAdornment: <InputAdornment  className={classes.adornment} position=\"start\">£</InputAdornment>,\r\n                        }}\r\n                        onChange={handleChange(\"deposit\")}\r\n                        onClick={e => e.target.setSelectionRange(0, e.target.value.length)}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <TextField\r\n                        label=\"Mortgage Term\"\r\n                        defaultValue=\"25\"\r\n                        variant=\"outlined\"\r\n                        className={clsx(classes.margin, classes.textField)}\r\n                        InputProps={{\r\n                            endAdornment: <InputAdornment  className={classes.adornment} position=\"end\">years</InputAdornment>,\r\n                        }}\r\n                        onChange={handleChange(\"years\")}\r\n                        onClick={e => e.target.setSelectionRange(0, e.target.value.length)}\r\n                        />\r\n                        <TextField\r\n                        label=\"Interest Rate\"\r\n                        defaultValue=\"3\"\r\n                        variant=\"outlined\"\r\n                        className={clsx(classes.margin, classes.textField)}\r\n                        InputProps={{\r\n                            endAdornment: <InputAdornment  className={classes.adornment} position=\"end\">%</InputAdornment>,\r\n                        }}\r\n                        onChange={handleChange(\"interestRate\")}\r\n                        onClick={e => e.target.setSelectionRange(0, e.target.value.length)}\r\n                        />\r\n                    </div>\r\n                    \r\n                </div>              \r\n                \r\n                <div className=\"radioResultContainer\">\r\n                    <RadioGroup aria-label=\"repaymentType\" defaultValue=\"Repayment\" onChange={handleChange(\"repaymentType\")}>\r\n                        <FormControlLabel name=\"Repayment\" value=\"Repayment\" control={<Radio />} label=\"Repayment\" />\r\n                        <FormControlLabel name=\"Interest\" value=\"Interest\" control={<Radio />} label=\"Interest Only\" />\r\n                    </RadioGroup>\r\n                    <div className=\"resultContainer\">\r\n                        <p className=\"mortgageLargeText\">You would pay  \r\n                            <span className={repayment + \" mortgageAmount\"}>£{repaymentResult}</span>\r\n                            <span className={interest + \" mortgageAmount\"}>£{interestResult}</span> /month\r\n                        </p>\r\n                        <p className=\"mortgageSmallText\">over the course of {values.years} years</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"mortgageChartContainer\">\r\n                <Line \r\n                    className=\"mortgageChart\"\r\n                    legend={{\r\n                        display: false\r\n                    }}\r\n                    data={{\r\n                        label: \"none\",\r\n                        labels: Object.values(years),\r\n                        datasets: [{\r\n                            data: yAxisValues,\r\n                            backgroundColor: 'rgba(73, 74, 243, 0.2)',\r\n                            borderColor: 'rgba(73, 74, 243, 1)',\r\n                        }],\r\n                    }}\r\n                    options = {{\r\n                        scales: {\r\n                            yAxes: [{\r\n                            scaleLabel: {\r\n                                display: true,\r\n                                labelString: 'Amount (£)'\r\n                            },\r\n                            ticks: {\r\n                                stepSize: 50000\r\n                            }\r\n                            }],\r\n                            xAxes: [{\r\n                            scaleLabel: {\r\n                                display: true,\r\n                                labelString: 'Years'\r\n                            }\r\n                            }],\r\n                        }     \r\n                    }}\r\n                />\r\n            </div>\r\n        </Paper>\r\n    )\r\n}\r\n\r\nexport default MortgageCalculator;","import React, { useState, useEffect } from \"react\";\r\nimport Carousel from 'react-material-ui-carousel';\r\nimport BathtubIcon from '@material-ui/icons/Bathtub';\r\nimport KingBedIcon from '@material-ui/icons/KingBed';\r\nimport WeekendIcon from '@material-ui/icons/Weekend';\r\nimport MortgageCalculator from \"./MortgageCalculator\";\r\nimport { connect } from \"react-redux\";\r\nimport { addToSaved } from \"../redux/save/save-actions\";\r\nimport BackBtn from \"./BackBtn\";\r\n\r\n\r\nfunction PropertyProfile({ currentItem, addToSaved }) {\r\n\r\n    useEffect(() => {\r\n        window.scrollTo(0, 0)\r\n    });\r\n\r\n    const [modalDisplay, setModalDisplay] = useState(false);\r\n\r\n    const handleContactClick = () => {\r\n        setModalDisplay(true)\r\n    }\r\n\r\n    const handleCloseClick = () => {\r\n        setModalDisplay(false)\r\n    }\r\n\r\n    const modalClass = modalDisplay ? \"show\" : \"hide\";\r\n\r\n    // checks to see if has more than one of the room types and makes them plural\r\n    const bedsPlural =   currentItem.bedrooms > 1 ? \"s\" : \"\";\r\n    const bathsPlural =   currentItem.bathrooms > 1 ? \"s\" : \"\";\r\n    const livingPlural =   currentItem.livingRooms > 1 ? \"s\" : \"\";\r\n\r\n    return (\r\n        <div className=\"profileContainer\">\r\n            <div className=\"profilePanel\">\r\n                <BackBtn/>\r\n                <div className=\"profileTop\">\r\n                    {/* check if there's more than one image for the property and if there is, maps them in a carousel. Else, it just shows the one image */}\r\n                    {currentItem.imgs.length > 1 ? \r\n                    <Carousel \r\n                        className=\"carousel\"\r\n                        autoPlay={false}\r\n                        navButtonsProps={{\r\n                            style: {\r\n                                padding: \"10px\",\r\n                            },\r\n                        }}\r\n                        navButtonsAlwaysVisible=\"false\"\r\n                    >\r\n                        {currentItem.imgs.map(image =>\r\n                            <img src={process.env.PUBLIC_URL + \"/images/properties/\" + image} alt={currentItem.imgAlt} className=\"carouselImg\"/>\r\n                        )}\r\n                    </Carousel> :\r\n                        <img src={process.env.PUBLIC_URL + \"/images/properties/\" + currentItem.imgs[0]} alt={currentItem.imgAlt} className=\"propertyProfileImg\"/>\r\n                    }\r\n                    <div className=\"profileMainDetails\">\r\n                        <p id=\"profilePrice\">{currentItem.displayPrice}</p>\r\n                        <p id=\"profileTagline\">{currentItem.bedrooms} bedroom {currentItem.type}</p>\r\n                        <div className=\"roomTypes desktopRooms\">\r\n                            <div className=\"indiRoomType\">\r\n                                <KingBedIcon className=\"roomTypeIcon\"/>\r\n                                {currentItem.bedrooms}\r\n                                <p>Bedroom{bedsPlural}</p>\r\n                            </div>\r\n                            <div className=\"indiRoomType\">\r\n                                <BathtubIcon className=\"roomTypeIcon\" />\r\n                                {currentItem.bathrooms}\r\n                                <p>Bathroom{bathsPlural}</p>\r\n                            </div>\r\n                            <div className=\"indiRoomType\">\r\n                                <WeekendIcon className=\"roomTypeIcon\" />\r\n                                {currentItem.livingRooms}\r\n                                <p>Living Room{livingPlural}</p>\r\n                            </div>\r\n                        </div>\r\n                        <div id=\"profileBtnsCont\">\r\n                            <button className=\"contactBtn btn\" onClick={handleContactClick}>\r\n                                contact the agent \r\n                            </button>\r\n                            <button className=\"profileSaveBtn saveBtn btn\" onClick={() => addToSaved(currentItem.id)}>save</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"roomTypes mobileRooms\">\r\n                    <div className=\"indiRoomType\">\r\n                        <KingBedIcon className=\"roomTypeIcon\" />\r\n                        {currentItem.bedrooms}\r\n                        <p>Bedrooms</p>\r\n                    </div>\r\n                    <div className=\"indiRoomType\">\r\n                        <BathtubIcon className=\"roomTypeIcon\" />\r\n                        {currentItem.bathrooms}\r\n                        <p>Bathrooms</p>\r\n                    </div>\r\n                    <div className=\"indiRoomType\">\r\n                        <WeekendIcon className=\"roomTypeIcon\" />\r\n                        {currentItem.livingRooms}\r\n                        <p>Living Rooms</p>\r\n                    </div>\r\n                </div>\r\n                <div className=\"profileFeaturesDesc\">\r\n                    <div className=\"featuresDesc\">\r\n                        <h2>Features</h2>\r\n                        <ul className=\"featureList\">\r\n                            {currentItem.features.map(feature =>\r\n                            <li>{feature}</li>\r\n                            )}\r\n                        </ul>\r\n                    </div>\r\n                    <div className=\"featuresDesc\">\r\n                        <h2>Description</h2>\r\n                        <p>{currentItem.propertyDesc}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <MortgageCalculator propertyPrice={currentItem.price} />\r\n            <div id=\"modalBackground\" className={modalClass}>\r\n                <div id=\"contactModal\">\r\n                    <button id=\"closeModal\" onClick={handleCloseClick}>X</button>\r\n                    If Homelee were a real company we'd provide details of the agent here.\r\n                    <br/> Unfortunately it's not.\r\n                    <br/> So we can't.\r\n                    <img src={process.env.PUBLIC_URL + \"/images/modal/modalImg.png\"} id=\"modalImg\" />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        currentItem: state.save.currentItem\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        addToSaved: (id) => dispatch(addToSaved(id))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PropertyProfile)","import * as actionTypes from \"./save-types\";\r\n\r\nexport const addToSaved = (itemID) => {\r\n    return {\r\n        type: actionTypes.ADD_TO_SAVED,\r\n        payload: {\r\n            id: itemID\r\n        }\r\n    }\r\n}\r\n\r\nexport const removeFromSaved = (itemID) => {\r\n    return {\r\n        type: actionTypes.REMOVE_FROM_SAVED,\r\n        payload: {\r\n            id: itemID\r\n        }\r\n    }\r\n}\r\n\r\nexport const loadCurrentItem = (item) => {\r\n    return {\r\n        type: actionTypes.LOAD_CURRENT_ITEM,\r\n        payload: item\r\n    }\r\n}\r\n\r\nexport const getMinPriceValue = (value) => {\r\n    return {\r\n        type: actionTypes.GET_MINPRICE_VALUE,\r\n        payload: value\r\n    }\r\n}\r\n\r\nexport const getMaxPriceValue = (value) => {\r\n    return {\r\n        type: actionTypes.GET_MAXPRICE_VALUE,\r\n        payload: value\r\n    }\r\n}\r\n\r\nexport const getMinBedsValue = (value) => {\r\n    return {\r\n        type: actionTypes.GET_MINBEDS_VALUE,\r\n        payload: value\r\n    }\r\n}\r\n\r\nexport const getMaxBedsValue = (value) => {\r\n    return {\r\n        type: actionTypes.GET_MAXBEDS_VALUE,\r\n        payload: value\r\n    }\r\n}"],"sourceRoot":""}